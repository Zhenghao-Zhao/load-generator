from .metric import IncMetric
from .metric import RandMetric


class Node:
    """the load generated by a node"""

    def __init__(self, metrics, schema, table, n_template):
        """takes in a dict of metrics, with metric value range as value"""

        self.metrics = metrics
        self.schema = schema
        self.table = table
        self.id = n_template['id']
        self.live_metrics = {}
        self.output_metrics = {}
        self.__init_metrics()

    def __init_metrics(self):
        """initialize metrics"""

        for metric_name, metric_pattern in self.metrics.items():
            l = metric_pattern.split()
            if l[0] == '(>':
                self.metrics[metric_name] = IncMetric(float(l[1]), float(l[2][1:]), float(l[4][:-2]))
            else:
                self.metrics[metric_name] = RandMetric(0, float(l[0][1:]), float(l[-1][:-1]))

    def __gen_metric_values(self):
        """generate metric values and replace old ones in live_metrics"""

        for metric_name, metric in self.metrics.items():
            self.live_metrics[metric_name] = metric.update()

    def get_new_load(self):
        """refresh metric values and get copies of load"""

        self.__gen_metric_values()
        for key, value in self.live_metrics.items():
            for s in range(1, self.schema+1):
                for t in range(1, self.table+1):
                    k = '/metrics/type=IndexTable/keyspace={}/scope={}/name={}/mean'.format(s, t, key)
                    self.output_metrics[k] = value

        return self.output_metrics


class Cluster:
    """a collection of loads generated by a number of nodes"""

    def __init__(self, c_template):
        self.id = c_template['id']
        self.cluster_number = c_template['count']

        self.node_number = 0
        self.nodes = []
        self.__init_load(c_template)


    def __init_load(self, c_template):
        """initialize node load"""

        node_templates = c_template['nodes']
        lst = []
        for c in range(self.cluster_number):
            for n in node_templates:
                node_num = n['count']
                for i in range(node_num):
                    node = Node({**c_template['metrics'], **n['additional_metrics']}, c_template['schema'], c_template['table'], n)
                    # amoritized 0(1)
                    lst.append(node)

        self.node_number = len(lst)
        self.nodes = lst

    def get_node(self, nid):
        """retrieve a node object from the list"""

        return self.nodes[nid]
